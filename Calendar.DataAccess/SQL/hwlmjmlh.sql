CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;

CREATE TABLE "Events" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Title" character varying(30) NOT NULL,
    "Date" text NOT NULL,
    "Color" text NOT NULL,
    CONSTRAINT "PK_Events" PRIMARY KEY ("Id")
);

INSERT INTO "Events" ("Id", "Color", "Date", "Title")
VALUES (1, 'FF0000', '7/16/2024 6:49:08 AM', 'Lunch');
INSERT INTO "Events" ("Id", "Color", "Date", "Title")
VALUES (2, 'FFFF00', '7/16/2024 2:49:08 AM', 'Work');
INSERT INTO "Events" ("Id", "Color", "Date", "Title")
VALUES (3, '00FFFF', '7/15/2024 10:49:08 PM', 'Start');

SELECT setval(
    pg_get_serial_sequence('"Events"', 'Id'),
    GREATEST(
        (SELECT MAX("Id") FROM "Events") + 1,
        nextval(pg_get_serial_sequence('"Events"', 'Id'))),
    false);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20240715224909_addEventTable', '8.0.7');

CREATE OR REPLACE FUNCTION get_all_event_ordered_by_id()
RETURNS SETOF "Events"
AS $$
BEGIN
    RETURN QUERY
        SELECT * 
        FROM "Events"
        ORDER BY id;
END;
$$ LANGUAGE plpgsql;

COMMIT;

